<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">move_boundaries_beta</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="Structured">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0e-2</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0e0</real_value>
    </finish_time>
  </timestepping>
  <material_phase name="Fluid">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1000.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin/>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">only first timestep</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <boundary_conditions name="Outlets">
          <surface_ids>
            <integer_value shape="2" rank="1">1 3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <no_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <viscosity_scheme>
              <compact_discontinuous_galerkin/>
              <tensor_form/>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <project_velocity_to_continuous>
                <mesh name="CoordinateMesh"/>
              </project_velocity_to_continuous>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <buoyancy/>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.5</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import numpy

  return (2.0*numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.sin(numpy.pi*X[1]),     
          -numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.cos(numpy.pi*X[1]))</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="Walls">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Inlet">
          <surface_ids>
            <integer_value shape="1" rank="1">4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly>
              <boundary_overwrites_initial_condition/>
            </apply_weakly>
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  import numpy

  return 2.0*numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.sin(numpy.pi*X[1])</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="code" language="python">def val(X,t):
  import numpy

  return  -numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.cos(numpy.pi*X[1])</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="OutletNS">
          <surface_ids>
            <integer_value shape="2" rank="1">1 3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">1.0e-2</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="ParticleVolumeFraction" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">import vtk_support
import particle_model as pm
import vtk
mb=vtk_support.fluidity_to_mblock(state)
reader=pm.Options.OptionsReader()

try:
  PB=persistent['particle_model']
  i=persistent['particle_model_step']
except:
  import drive_from_fluidity
  PB= drive_from_fluidity.setup(mb,time,dt)
  persistent['particle_model']=PB
  i=0
  pm.IO.write_level_to_polydata(PB, 0,    reader.get_name(), do_average=False)

PB.system.boundary.update(mb)

PB.run(time+dt, write=False,method="AdamsBashforth2")
pm.IO.write_level_to_polydata(PB, i+1, reader.get_name(), do_average=False)
pm.IO.collision_list_to_polydata(PB.collisions(), 'collisions.vtp')

ug=pm.IO.get_boundary_from_fluidity_mesh(state.vector_fields['Coordinate'])
writer=vtk.vtkXMLUnstructuredGridWriter()
writer.SetFileName('boundary_%s.vtu'%i)
writer.SetInput(ug)
writer.Write()

wear = 1.0e-4*pm.Coupling.get_wear_rate_source(PB,1.0e1,dt)
print wear.max(), wear.min()
state.scalar_fields['WearSource'].val[:]=0.0
state.scalar_fields['WearSource'].val[map(round,state.scalar_fields['SurfaceLocalNodeIds'].val)] = wear[:]
field.val[:]= pm.Coupling.get_cv_fraction(PB, mb)

persistent['particle_model']=PB
persistent['particle_model_step']=i+1</string_value>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="Wear" rank="0">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">1.0e-1</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="scalar_python_diagnostic" material_phase_support="single">
              <string_value lines="20" type="code" language="python">pass</string_value>
              <depends>
                <string_value lines="1">ParticleVolumeFraction</string_value>
              </depends>
            </algorithm>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <scalar_field name="Absorption" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">1.0e1</real_value>
              </constant>
            </value>
            <output/>
            <stat/>
            <detectors>
              <exclude_from_detectors/>
            </detectors>
          </prescribed>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="WearVelocity" rank="1">
      <diagnostic>
        <algorithm source_field_type="scalar" material_phase_support="single" name="weighted_normal" source_field_name="Wear">
          <surface_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </surface_ids>
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1.0e-7</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
    <vector_field name="ContVelocity" rank="1">
      <diagnostic>
        <algorithm source_field_type="vector" material_phase_support="single" name="vector_galerkin_projection" source_field_name="Velocity">
          <solver>
            <iterative_method name="cg"/>
            <preconditioner name="sor"/>
            <relative_error>
              <real_value rank="0">1.0e-7</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <never_ignore_solver_failures/>
            <diagnostics>
              <monitors/>
            </diagnostics>
          </solver>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <vector_field name="InterpolationErrorBound" rank="1">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value shape="2" dim1="dim" rank="1">0.001 0.001</real_value>
                  </constant>
                </value>
                <output/>
                <stat>
                  <include_in_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </vector_field>
            <p_norm>
              <integer_value rank="0">2</integer_value>
            </p_norm>
          </absolute_measure>
        </adaptivity_options>
      </diagnostic>
    </vector_field>
  </material_phase>
  <mesh_adaptivity>
    <mesh_movement>
      <imposed_grid_velocity/>
      <vector_field name="GridVelocity" rank="1">
        <aliased material_phase_name="Fluid" field_name="WearVelocity"/>
      </vector_field>
    </mesh_movement>
  </mesh_adaptivity>
  <embedded_models>
    <stochastic_routines/>
    <particle_model>
      <inlet name="test">
        <surface_ids>
          <integer_value shape="1" rank="1">4</integer_value>
        </surface_ids>
        <insertion_rate>
          <real_value rank="0">100000</real_value>
        </insertion_rate>
        <particle_velocity>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import numpy

  return (2.0*numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.sin(numpy.pi*X[1]),     
          -numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.cos(numpy.pi*X[1]), 0)</string_value>
          </python>
        </particle_velocity>
        <probability_density_function>
          <python>
            <string_value lines="20" type="code" language="python">def val(X,t):
  import numpy
  if X[1]&gt;=0.33 and X[1]&lt;=0.67:
    return 2.0*numpy.pi*numpy.cos(0.5*numpy.pi*X[0])*numpy.sin(numpy.pi*X[1])
  else:
    return 0.0</string_value>
          </python>
        </probability_density_function>
      </inlet>
      <outlet_ids>
        <surface_ids>
          <integer_value shape="3" rank="1">1 3 4</integer_value>
        </surface_ids>
      </outlet_ids>
      <particle_classes>
        <particle_class name="Sand">
          <diameter>
            <real_value rank="0">40.0e-3</real_value>
          </diameter>
          <density>
            <real_value rank="0">2.5e3</real_value>
          </density>
        </particle_class>
      </particle_classes>
    </particle_model>
  </embedded_models>
</fluidity_options>
